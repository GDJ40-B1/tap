<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.btf.tap.mapper.MemberMapper">
	<resultMap type="com.btf.tap.vo.Member" id="resultMember">
		<result column="member_id" property="memberId"/>
		<result column="member_pw" property="memberPw"/>
		<result column="member_age" property="memberAge"/>
		<result column="member_phone" property="memberPhone"/>
		<result column="member_name" property="memberName"/>
		<result column="member_point" property="memberPoint"/>
		<result column="create_date" property="createDate"/>
		<result column="update_date" property="updateDate"/>
	</resultMap>
	
	<!-- 회원 한 명의 정보 불러오기 -->
	<select id="selectMemberOne" resultMap="resultMember" parameterType="com.btf.tap.vo.Member" >
		SELECT 
			member_id,
			member_name,
			member_age,
			member_phone,
			member_point,
			create_date,
			update_date
		FROM
			member
		WHERE
			member_id=#{memberId}
	</select>
	
	<!-- 회원 전체 목록 불러오기 -->
	<select id="selectMemberList" resultMap="resultMember" parameterType="com.btf.tap.vo.Member" >
		SELECT 
			member_id,
			member_name,
			member_age,
			member_phone,
			member_point,
			create_date,
			update_date
		FROM
			member
		ORDER BY 
			create_date DESC
		LIMIT #{beginRow}, #{rowPerPage}	
	</select>
	
	<!-- 전체 회원 수 -->
	<select id="totalMemberCount" resultType="int">
		SELECT
			COUNT(*)
		FROM 
			member	 
	</select>
	
	<!-- 회원 비밀번호 확인하기(수정용) -->
	<select id="selectMemberPw" parameterType="com.btf.tap.vo.Member" resultType="int" >
		SELECT 
			COUNT(*)
		FROM
			member
		WHERE
			member_id=#{memberId} AND
			member_pw=#{memberPw}
	</select>
	
	<!--  새로운 회원 한 명 등록하기 -->
	<insert id="insertMemberOne" parameterType="com.btf.tap.vo.Member">
		INSERT INTO
			member(
				member_id, 
				member_pw,
				member_age,
				member_name,
				member_phone,
				member_point,
				create_date,
				update_date 
			)
		VALUES (
			#{memberId},
			#{memberPw},
			#{memberAge},
			#{memberName},
			#{memberPhone},
			0,
			NOW(),
			NOW()
		)
	</insert>

	<!--  회원 등록 후 선호지역 저장 -->
	<insert id="insertPreferLocal" parameterType="java.util.Map">
		INSERT INTO
			prefer_local(
				member_id,
				si_gun_gu_id
			)
		VALUES (
			#{memberId},
			(SELECT si_gun_gu_id FROM si_gun_gu WHERE si_do = #{sido} and si_gun_gu = #{sigungu})
		)
	</insert>
	
	<!-- 특정 회원 선호지역 조회 -->
	<select id="selectPreferLocal" parameterType="String" resultType="java.util.Map">
		SELECT
			s.si_do sido,
			s.si_gun_gu sigungu
		FROM prefer_local p 
		INNER JOIN si_gun_gu s
		ON p.si_gun_gu_id = s.si_gun_gu_id
		<where>
			p.member_id = #{memberId}
		</where>
	</select>
	
	<!-- 회원 한 명의 정보를 수정(나이,이름, 전화번호 ) -->
	<update id="updateMemberOne" parameterType="com.btf.tap.vo.Member">
		UPDATE
			member
		SET
			member_age=#{memberAge},
			member_name=#{memberName},
			member_phone=#{memberPhone},
			update_date=NOW()
		WHERE
			member_id=#{memberId}
	</update>
	
	<!-- 특정 회원 선호지역 수정 -->
	<update id="updatePreferLocal" parameterType="java.util.Map">
		UPDATE
			prefer_local
		SET
			si_gun_gu_id = (SELECT si_gun_gu_id FROM si_gun_gu WHERE si_do = #{sido} and si_gun_gu = #{sigungu})
		<where>
			member_id = #{memberId}
		</where>
	</update>
	
	<!-- 회원 한 명의 포인트를 충전 -->
	<update id="updateMemberPointEarn" parameterType="com.btf.tap.vo.Member">
		{
			call member_update_point(
				#{memberId},
				#{memberPoint},
				'충전',
				0,
				now()
			)
			
		}

	</update>
	
	<!-- 회원 한 명의 포인트를 전환 -->
	<update id="updateMemberPointSpend" parameterType="com.btf.tap.vo.Member">
		{
			call member_update_point(
				#{memberId},
				#{memberPoint},
				'전환',
				0,
				now()
			)
			
		}
	</update>
	
	<!-- 회원 한 명의 정보를 수정(비밀번호) -->
	<update id="updateMemberPw" parameterType="com.btf.tap.vo.Member" statementType="CALLABLE">
		UPDATE
			member
		SET
			member_pw=#{memberPw},
			update_date=NOW()
		WHERE
			member_id=#{memberId}
	</update>
	
	<!-- 회원 한 명의 정보를 삭제 -->
	<delete id="deleteMemberOne" parameterType="com.btf.tap.vo.Member" statementType="CALLABLE">
		DELETE FROM
			member
		WHERE
			member_id=#{memberId} AND
			member_pw=#{memberPw}
	</delete>
	
	<!-- 특정회원 결제 내역 -->
	<select id="selectMemberPayList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			p.payment_id paymentId,
			r.room_id roomId,
			r.detail_address_id detailAddressId,
			p.room_name roomName,
			p.final_payment_price price,
			p.payment_date paymentDate,
			p.refund_status refundStatus,
			rr.room_review_content roomReviewContent
		FROM payment p
		LEFT JOIN reservation rv ON p.reservation_id = rv.reservation_id
		LEFT JOIN room r ON rv.room_id = r.room_id
		LEFT JOIN room_review rr ON p.payment_id = rr.payment_id
		<where>
			p.member_id = #{memberId}
			AND p.payment_date BETWEEN #{minDay} AND #{maxDay}
		</where>
		ORDER BY p.payment_date DESC;
	</select>
	
	<!-- 연도별 월간 결제 총액 조회 -->
	<select id="selectTotalPaymentList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			DATE_FORMAT(payment_date, '%Y-%m') monthList, 
			SUM(final_payment_price) price
		FROM payment
		<where>
			YEAR(payment_date) = #{year}
			AND refund_status = 'N'
			AND member_id = #{memberId}		
		</where>
		GROUP BY monthList;	
	</select>
	
	<!-- 회원 사이트 총 결제 횟수 조회 -->
	<select id="selectTotalPaymentCount" parameterType="String" resultType="int">
		SELECT 
			COUNT(*)
		FROM payment
		<where>
			member_id = #{memberId}
			AND refund_status = 'N'
		</where>
	</select>
	
	<!-- 연도별 숙소 결제 금액 조회 -->
	<select id="selectRoomTotalPayment" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			room_name roomName,
			SUM(final_payment_price) price
		FROM payment
		<where>
			member_id = #{memberId}
			AND refund_status = 'N'
			and YEAR(payment_date) = #{year}
		</where>
		GROUP BY roomName;
	</select>
	
	<!-- 회원 현재 보유 쿠폰 갯수 -->
	<select id="selectCouponCount" parameterType="String" resultType="int">
		SELECT
			COUNT(*)
		FROM member_coupon
		<where>
			member_id = #{memberId}
		</where>
	</select>
</mapper>